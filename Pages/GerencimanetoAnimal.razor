@page "/gerencimaneto-animal"
@using SystemManagementPetshop.Models
@using SystemManagementPetshop.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using BlazorInputMask
@inject AnimalService AnimalService
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject IJSRuntime JS

<PageTitle>Registro de Animal</PageTitle>

<div class="flex flex-col gap-4">
  <Header Title="Registro de Animal"
    Description="Cadastre e gerencie animais do pet shop, incluindo dados dos donos e informações veterinárias." />

  <div class="flex flex-row gap-8 w-full">
    <div class="bg-gray-50 dark:bg-gray-800 rounded-lg w-full shadow-sm border-2 border-gray-200 dark:border-gray-700">
      <div class="px-4 py-3 flex flex-row gap-6 text-gray-700 dark:text-gray-300">
        <div class="flex flex-col gap-2 w-full">
          <div class="font-bold">Pesquisa de texto</div>
          <div class="relative z-0 w-full group">
            <input @bind="filtroTexto" @bind:event="oninput" @onkeyup="AplicarFiltro"
              class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
              placeholder="Buscar por nome do animal ou dono" />
          </div>
        </div>
        <div class="flex flex-col gap-2 min-w-56">
          <label for="ordenacao" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Ordenação</label>
          <select id="ordenacao" @bind="tipoOrdenacao" @bind:after="AplicarFiltro"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
            <option selected value="nome_asc">Nome (A-Z)</option>
            <option value="nome_desc">Nome (Z-A)</option>
            <option value="tipo_asc">Tipo (A-Z)</option>
            <option value="tipo_desc">Tipo (Z-A)</option>
            <option value="idade_asc">Idade (Menor-Maior)</option>
            <option value="idade_desc">Idade (Maior-Menor)</option>
          </select>
        </div>
        <div class="flex items-end w-44">
          <button @onclick="LimparFiltros"
            class="px-4 py-2 text-sm h-12 font-medium text-white bg-gray-600 rounded-lg hover:bg-gray-700 focus:ring-4 focus:outline-none focus:ring-gray-300">
            Limpar Filtros
          </button>
        </div>
      </div>
    </div>
    <button type="button" @onclick="ShowModal"
      class="text-white bg-sky-700 hover:bg-sky-800 focus:ring-4 focus:outline-none focus:ring-sky-300 font-medium rounded-lg text-sm w-48 px-5 py-2.5 text-center dark:bg-sky-600 dark:hover:bg-sky-700 dark:focus:ring-sky-800">Cadastrar
      Animal</button>
  </div>

  <h2 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Animais Cadastrados</h2>
  <div class="grid grid-cols-[repeat(2,minmax(350px,1fr))] 2xl:grid-cols-[repeat(3,minmax(350px,1fr))] gap-4">
    @if (animaisListFiltrada?.Any() == true)
    {
      @foreach (var animalItem in animaisListFiltrada)
      {
        <div
          class="bg-gray-50 dark:bg-gray-800 rounded-lg mb-4 shadow-sm border-2 border-gray-200 dark:border-gray-700 flex flex-col justify-between">
          <div class="px-4 py-3 grid grid-cols-3 gap-4 text-gray-700 dark:text-gray-300">
            <div>
              <div class="font-bold">Nome</div>
              <div>@animalItem.NomeAni</div>
            </div>
            <div>
              <div class="font-bold">Tipo</div>
              <div>@animalItem.TipoAni</div>
            </div>
            <div>
              <div class="font-bold">Raça</div>
              <div>@animalItem.RacaAni</div>
            </div>
            <div>
              <div class="font-bold">Idade</div>
              <div>@(animalItem.IdadeAni?.ToString() ?? "N/A")</div>
            </div>
            <div>
              <div class="font-bold">Peso</div>
              <div>@(animalItem.PesoAni?.ToString("F2") ?? "N/A") kg</div>
            </div>
            <div>
              <div class="font-bold">Dono</div>
              <div>@(animalItem.DonoNome ?? "N/A")</div>
            </div>
          </div>

          <div class="flex justify-center gap-6 py-3 px-4 bg-gray-200 dark:bg-gray-700 rounded-b-lg">
            <button @onclick="() => EditarAnimal(animalItem)"
              class="inline-flex cursor-pointer items-center px-3 py-2 text-sm font-medium text-center text-white bg-sky-700 rounded-lg hover:bg-sky-800 focus:ring-4 focus:outline-none focus:ring-sky-300 dark:bg-sky-600 dark:hover:bg-sky-700 dark:focus:ring-sky-800">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z">
                </path>
              </svg>
              Editar
            </button>

            <button @onclick="() => ExcluirAnimal(animalItem.Id)"
              class="inline-flex cursor-pointer items-center px-3 py-2 text-sm font-medium text-center text-white bg-red-700 rounded-lg hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16">
                </path>
              </svg>
              Excluir
            </button>
          </div>
        </div>
      }
    }
    else
    {
      <div
        class="bg-white w-full col-span-2 dark:bg-gray-800 p-4 rounded-lg text-center text-gray-500 dark:text-gray-400 border-2 border-gray-200 dark:border-gray-700">
        Nenhum animal cadastrado
      </div>
    }
  </div>


  <!-- Main modal -->
  <div id="default-modal" tabindex="-1" aria-hidden="true" data-modal-backdrop="static"
    class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
    <div class="relative p-4 w-full max-w-2xl max-h-full">
      <!-- Modal content -->
      <div class="relative bg-white rounded-lg shadow-sm dark:bg-gray-700">
        <!-- Modal header -->
        <div
          class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600 border-gray-200">
          <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
            @(modoEdicao ? "Editar Animal" : "Registro de Animal")
          </h3>
          <button type="button" @onclick="CloseModal"
            class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
            data-modal-hide="default-modal">
            <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
            </svg>
            <span class="sr-only">Fechar modal</span>
          </button>
        </div>
        <!-- Modal body -->
        <EditForm Model="@animal" OnValidSubmit="HandleValidSubmit" class="p-4">
          <DataAnnotationsValidator />

          <div class="relative z-0 w-full mb-5 group">
            <input @bind="animal.NomeAni" id="floating_nome_animal"
              class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
              placeholder=" " required />
            <label for="floating_nome_animal"
              class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Nome
              do Animal</label>
          </div>

          <div class="relative z-0 w-full mb-5 group">
            <label for="select_tipo" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Tipo de
              Animal</label>
            <select id="select_tipo" @bind="animal.TipoAni"
              class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              required>
              <option value="Cachorro">Cachorro</option>
              <option value="Gato">Gato</option>
              <option value="Passaro">Pássaro</option>
              <option value="Peixe">Peixe</option>
              <option value="Roedor">Roedor</option>
              <option value="Reptil">Réptil</option>
              <option value="Outro">Outro</option>
            </select>
          </div>

          <div class="relative z-0 w-full mb-5 group">
            <input @bind="animal.RacaAni" id="floating_raca"
              class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
              placeholder=" " required />
            <label for="floating_raca"
              class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Raça</label>
          </div>

          <div class="relative z-0 w-full mb-5 group">
            <input @bind="animal.IdadeAni" type="number" id="floating_idade"
              class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
              placeholder=" " />
            <label for="floating_idade"
              class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Idade
              (anos)</label>
          </div>

          <div class="relative z-0 w-full mb-5 group">
            <input @bind="animal.PesoAni" type="number" step="0.1" id="floating_peso"
              class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
              placeholder=" " />
            <label for="floating_peso"
              class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Peso
              (kg)</label>
          </div>

          <div class="relative z-0 w-full mb-5 group">
            <input @bind="animal.DonoNome" id="floating_dono_nome"
              class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
              placeholder=" " />
            <label for="floating_dono_nome"
              class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Nome
              do Dono</label>
          </div>

          <div class="relative z-0 w-full mb-5 group">
            <InputMask name="telefone" id="floating_telefone" data-mask="(00) 0 0000-0000"
              @bind-Value="animal.DonoTelefone"
              class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
              placeholder=" " required />

            <label for="floating_dono_telefone"
              class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Telefone
              do Dono</label>
          </div>

          <!-- Modal footer -->
          <div class="flex items-center rounded-b dark:border-gray-600">
            <button data-modal-hide="default-modal" type="submit"
              class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
              @(modoEdicao ? "Atualizar" : "Cadastrar")</button>
            <button data-modal-hide="default-modal" type="button" @onclick="CloseModal"
              class="py-2.5 px-5 ms-3 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">Cancelar</button>
          </div>
        </EditForm>
      </div>
    </div>
  </div>
</div>

@code {
  private Animal animal = new Animal();
  private string mensagem = string.Empty;
  private List<Animal> animaisList = new List<Animal>();
  private List<Animal> animaisListFiltrada = new List<Animal>();
  private bool modoEdicao = false;
  private string filtroTexto = "";
  private string tipoOrdenacao = "nome_asc";

  protected override async Task OnInitializedAsync()
  {
    await CarregarAnimais();
  }

  private async Task CarregarAnimais()
  {
    try
    {
      animaisList = await AnimalService.GetAnimais();
      AplicarFiltro();
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao carregar animais: {ex.Message}");
    }
  }

  private void AplicarFiltro()
  {
    var resultados = string.IsNullOrWhiteSpace(filtroTexto)
    ? animaisList
    : animaisList.Where(a =>
    a.NomeAni.Contains(filtroTexto, StringComparison.OrdinalIgnoreCase) ||
    (a.DonoNome != null && a.DonoNome.Contains(filtroTexto, StringComparison.OrdinalIgnoreCase))).ToList();

    switch (tipoOrdenacao)
    {
      case "nome_asc":
        resultados = resultados.OrderBy(a => a.NomeAni).ToList();
        break;
      case "nome_desc":
        resultados = resultados.OrderByDescending(a => a.NomeAni).ToList();
        break;
      case "tipo_asc":
        resultados = resultados.OrderBy(a => a.TipoAni).ToList();
        break;
      case "tipo_desc":
        resultados = resultados.OrderByDescending(a => a.TipoAni).ToList();
        break;
      case "idade_asc":
        resultados = resultados.OrderBy(a => a.IdadeAni ?? 0).ToList();
        break;
      case "idade_desc":
        resultados = resultados.OrderByDescending(a => a.IdadeAni ?? 0).ToList();
        break;
    }

    animaisListFiltrada = resultados;
  }

  private void LimparFiltros()
  {
    filtroTexto = "";
    tipoOrdenacao = "nome_asc";
    AplicarFiltro();
  }

  private void LimparCampos()
  {
    animal = new Animal();
    modoEdicao = false;
  }

  private async Task ShowModal()
  {
    await JS.InvokeVoidAsync("flowbiteInterop.showModal", "default-modal");
  }

  private async Task CloseModal()
  {
    LimparCampos();
    await JS.InvokeVoidAsync("flowbiteInterop.closeModal", "default-modal");
  }

  private async Task HandleValidSubmit()
  {
    try
    {
      if (!string.IsNullOrEmpty(animal.DonoTelefone) && animal.DonoTelefone.Length > 11)
      {
        animal.DonoTelefone = animal.DonoTelefone.Substring(0, 11);
      }

      if (modoEdicao)
      {
        await AnimalService.UpdateAnimal(animal);
        ToastService.ShowSuccess("Animal atualizado com sucesso!");
      }
      else
      {
        await AnimalService.CreateAnimal(animal);
        ToastService.ShowSuccess("Animal cadastrado com sucesso!");
      }

      animal = new Animal();
      modoEdicao = false;
      await CarregarAnimais();

      // Fechar o modal após o sucesso
      await JS.InvokeVoidAsync("flowbiteInterop.closeModal", "default-modal");
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Erro completo: {ex}");

      // Exibir mensagem de erro mais detalhada
      string mensagemErro = ex.InnerException != null
      ? $"{ex.Message} - {ex.InnerException.Message}"
      : ex.Message;

      ToastService.ShowError($"Erro ao {(modoEdicao ? "atualizar" : "cadastrar")} animal: {mensagemErro}");
    }
  }

  private void EditarAnimal(Animal animalParaEditar)
  {
    animal = new Animal
    {
      Id = animalParaEditar.Id,
      NomeAni = animalParaEditar.NomeAni,
      TipoAni = animalParaEditar.TipoAni,
      RacaAni = animalParaEditar.RacaAni,
      IdadeAni = animalParaEditar.IdadeAni,
      PesoAni = animalParaEditar.PesoAni,
      DonoNome = animalParaEditar.DonoNome,
      DonoTelefone = animalParaEditar.DonoTelefone
    };

    Console.WriteLine($"Editando animal - ID: {animal.Id}, Nome: {animal.NomeAni}");

    modoEdicao = true;

    JS.InvokeVoidAsync("flowbiteInterop.showModal", "default-modal");
  }

  private async Task ExcluirAnimal(int id)
  {
    try
    {
      await AnimalService.DeleteAnimal(id);
      await CarregarAnimais();
      ToastService.ShowSuccess("Animal excluído com sucesso!");
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao excluir animal: {ex.Message}");
    }
  }
}