@page "/"
@using Microsoft.JSInterop
@using AppConcurso.Models
@using AppConcurso.Services
@using System.Text
@inherits FlowbitePage
@inject CargoService CargoService
@inject CandidatoService CandidatoService
@inject InscricaoService InscricaoService
@inject ToastService ToastService

<PageTitle>Dashboard</PageTitle>

<div class="flex flex-col gap-4">
  <Header Title="Dashboard"
    Description="Ver de forma fácil e rápida os dados do sistema em forma de gráficos. Interaja e analise os dados de forma simples e prática." />

  <div class="flex flex-row gap-4 mb-4">
    <button @onclick="GerarCargosAleatorios"
      class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
      Gerar Cargos Aleatórios
    </button>
    <button @onclick="GerarCandidatosAleatorios"
      class="text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
      Gerar Candidatos Aleatórios
    </button>
    <button @onclick="GerarInscricoesAleatorias"
      class="text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:outline-none focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800">
      Gerar Inscrições Aleatórias
    </button>
  </div>

  <div class="flex flex-col flex-wrap lg:flex-row gap-4">
    <div
      class="bg-white rounded-lg w-[600px] shadow-sm dark:bg-gray-800 p-4 md:p-6 border-2 border-gray-200 dark:border-gray-700">
      <h5 class="text-xl mb-4 font-bold leading-none text-gray-900 dark:text-white pe-1">
        Candidatos Inscritos
      </h5>
      <div class="grid grid-cols-2">
        <dl class="flex items-center">
          <dt class="text-gray-500 dark:text-gray-400 text-sm font-normal me-1">Candidatos Inscritos:</dt>
          <dd class="text-gray-900 text-sm dark:text-white font-semibold">@Candidatos.Count</dd>
        </dl>
        <dl class="flex items-center">
          <dt class="text-gray-500 dark:text-gray-400 text-sm font-normal me-1">Cargos:</dt>
          <dd class="text-gray-900 text-sm dark:text-white font-semibold">@Cargos.Count</dd>
        </dl>
        <dl class="flex items-center">
          <dt class="text-gray-500 dark:text-gray-400 text-sm font-normal me-1">Inscrições:</dt>
          <dd class="text-gray-900 text-sm dark:text-white font-semibold">@Inscricoes.Count</dd>
        </dl>
      </div>
      @if (Cargos.Count > 0 && Inscricoes.Count > 0)
      {
        <div class="mb-4 mt-2">
          <label for="selectCargoChart" class="block mb-1 text-sm font-medium text-gray-900 dark:text-white">Filtrar por
            Cargo:</label>
          <select id="selectCargoChart"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
            <option value="">Todos os cargos</option>
            @for (int i = 0; i < Cargos.Count; i++)
            {
              <option value="@i">@Cargos[i].NomeCargo</option>
            }
          </select>
        </div>
        <div id="column-chart"></div>
      }
      else
      {
        <div class="py-6 text-center text-gray-500 dark:text-gray-400">
          Ainda não existem dados cadastrados. Gere alguns registros para visualizar o gráfico.
        </div>
      }
    </div>

    <div
      class="bg-white rounded-lg w-[400px] flex flex-col justify-between shadow-sm dark:bg-gray-800 p-4 md:p-6 border-2 border-gray-200 dark:border-gray-700">
      <div class="flex justify-between mb-3">
        <div class="flex justify-center items-center">
          <h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white pe-1">
            Cargos Inscritos
          </h5>
        </div>
      </div>
      @if (Cargos.Count > 0 && Inscricoes.Count > 0)
      {
        <!-- Donut Chart -->
        <div class="py-6" id="donut-chart"></div>
      }
      else
      {
        <div class="py-6 text-center text-gray-500 dark:text-gray-400">
          Ainda não existem dados cadastrados. Gere alguns registros para visualizar o gráfico.
        </div>
      }
    </div>

    <div
      class="bg-white w-[400px] rounded-lg shadow-sm dark:bg-gray-800 p-4 md:p-6 border-2 border-gray-200 dark:border-gray-700 flex flex-col justify-between gap-4">
      <div class="flex justify-between items-start w-full">
        <div class="flex-col items-center">
          <div class="flex items-center mb-1">
            <h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white me-1">
              Candidatos Inscritos
            </h5>
          </div>
        </div>
      </div>
      @if (Cargos.Count > 0 && Inscricoes.Count > 0)
      {
        <!-- Line Chart -->
        <div class="py-6" id="pie-chart"></div>
      }
      else
      {
        <div class="py-6 text-center text-gray-500 dark:text-gray-400">
          Ainda não existem dados cadastrados. Gere alguns registros para visualizar o gráfico.
        </div>
      }
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    window.chartColumn = window.chartColumn || null;
    window.chartDonut = window.chartDonut || null;
    window.chartPie = window.chartPie || null;
    window.allCargos = window.allCargos || [];
    window.allInscricoesPorCargo = window.allInscricoesPorCargo || [];
    window.donutLabels = window.donutLabels || [];
    window.donutSeries = window.donutSeries || [];
    window.pieLabels = window.pieLabels || [];
    window.pieSeries = window.pieSeries || [];

    window.initDataCharts = function (totalCandidatos, totalCargos, totalInscricoes, cargos, inscricoesPorCargo, donutLabelsParam, donutSeriesParam, pieLabelsParam, pieSeriesParam) {
      console.log('initDataCharts chamado', { totalCandidatos, totalCargos, totalInscricoes, cargos, inscricoesPorCargo });

      window.allCargos = cargos;
      window.allInscricoesPorCargo = inscricoesPorCargo;
      window.donutLabels = donutLabelsParam;
      window.donutSeries = donutSeriesParam;
      window.pieLabels = pieLabelsParam;
      window.pieSeries = pieSeriesParam;

      if (window.chartColumn) { window.chartColumn.destroy(); window.chartColumn = null; }
      if (window.chartDonut) { window.chartDonut.destroy(); window.chartDonut = null; }
      if (window.chartPie) { window.chartPie.destroy(); window.chartPie = null; }

      if (cargos.length === 0 || inscricoesPorCargo.length === 0) {
        return;
      }

      if (typeof ApexCharts !== "undefined" && document.getElementById("column-chart")) {
        const optionsColumnChart = {
          colors: ["#1A56DB"],
          series: [
            {
              name: "Inscrições",
              color: "#1A56DB",
              data: cargos.map((cargo, idx) => ({ x: cargo, y: inscricoesPorCargo[idx] || 0 }))
            }
          ],
          chart: {
            type: "bar",
            height: "320px",
            fontFamily: "Inter, sans-serif",
            toolbar: {
              show: false,
            },
          },
          plotOptions: {
            bar: {
              horizontal: false,
              columnWidth: "70%",
              borderRadiusApplication: "end",
              borderRadius: 8,
            },
          },
          tooltip: {
            shared: true,
            intersect: false,
            style: {
              fontFamily: "Inter, sans-serif",
            },
          },
          states: {
            hover: {
              filter: {
                type: "darken",
                value: 1,
              },
            },
          },
          stroke: {
            show: true,
            width: 0,
            colors: ["transparent"],
          },
          grid: {
            show: false,
            strokeDashArray: 4,
            padding: {
              left: 2,
              right: 2,
              top: -14,
            },
          },
          dataLabels: {
            enabled: false,
          },
          legend: {
            show: false,
          },
          xaxis: {
            floating: false,
            labels: {
              show: true,
              style: {
                fontFamily: "Inter, sans-serif",
                cssClass: "text-xs font-normal fill-gray-500 dark:fill-gray-400",
              },
            },
            axisBorder: {
              show: false,
            },
            axisTicks: {
              show: false,
            },
          },
          yaxis: {
            show: false,
          },
          fill: {
            opacity: 1,
          },
        }
        window.chartColumn = new ApexCharts(document.getElementById("column-chart"), optionsColumnChart);
        window.chartColumn.render();
      }

      if (typeof ApexCharts !== "undefined" && document.getElementById("donut-chart")) {
        const optionsDonut = {
          series: window.donutSeries,
          labels: window.donutLabels,
          colors: ["#1C64F2", "#16BDCA", "#FDBA8C", "#E74694", "#9061F9", "#F59E42", "#F43F5E"],
          chart: {
            height: 320,
            width: "100%",
            type: "donut",
          },
          stroke: {
            colors: ["transparent"],
            lineCap: "",
          },
          plotOptions: {
            pie: {
              donut: {
                labels: {
                  show: true,
                  name: {
                    show: true,
                    fontFamily: "Inter, sans-serif",
                    offsetY: 20,
                  },
                  total: {
                    showAlways: true,
                    show: true,
                    label: "Total",
                    fontFamily: "Inter, sans-serif",
                    formatter: function (w) {
                      const sum = w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                      return sum;
                    },
                  },
                  value: {
                    show: true,
                    fontFamily: "Inter, sans-serif",
                    offsetY: -20,
                    formatter: function (value) {
                      return value;
                    },
                  },
                },
                size: "80%",
              },
            },
          },
          grid: {
            padding: {
              top: -2,
            },
          },
          dataLabels: {
            enabled: false,
          },
          legend: {
            position: "bottom",
            fontFamily: "Inter, sans-serif",
          },
        };
        window.chartDonut = new ApexCharts(document.getElementById("donut-chart"), optionsDonut);
        window.chartDonut.render();
      }

      if (typeof ApexCharts !== "undefined" && document.getElementById("pie-chart")) {
        const optionsPie = {
          series: window.pieSeries,
          labels: window.pieLabels,
          colors: ["#1C64F2", "#16BDCA", "#9061F9", "#F59E42", "#F43F5E", "#FDBA8C", "#E74694"],
          chart: {
            height: 420,
            width: "100%",
            type: "pie",
          },
          stroke: {
            colors: ["white"],
            lineCap: "",
          },
          plotOptions: {
            pie: {
              labels: {
                show: true,
              },
              size: "100%",
              dataLabels: {
                offset: -25
              }
            },
          },
          dataLabels: {
            enabled: true,
            style: {
              fontFamily: "Inter, sans-serif",
            },
          },
          legend: {
            position: "bottom",
            fontFamily: "Inter, sans-serif",
          },
        };
        window.chartPie = new ApexCharts(document.getElementById("pie-chart"), optionsPie);
        window.chartPie.render();
      }

      const selectCargo = document.getElementById("selectCargoChart");
      if (selectCargo) {
        selectCargo.onchange = function () {
          const idx = selectCargo.value;
          let data;
          if (idx === "") {
            data = window.allCargos.map((cargo, i) => ({ x: cargo, y: window.allInscricoesPorCargo[i] || 0 }));
          } else {
            data = [{ x: window.allCargos[idx], y: window.allInscricoesPorCargo[idx] || 0 }];
          }
          if (window.chartColumn) {
            window.chartColumn.updateSeries([
              {
                name: "Inscrições",
                color: "#1A56DB",
                data: data
              }
            ]);
          }
        }
      }
    }
  });
</script>

@code {
  [Inject]
  public IJSRuntime JSRuntime { get; set; }

  public List<Cargo> Cargos { get; set; } = new();
  public List<Candidato> Candidatos { get; set; } = new();
  public List<Inscricao> Inscricoes { get; set; } = new();

  public Dictionary<string, int> InscricoesPorCargo =>
  Inscricoes.Count > 0 ?
  Inscricoes
  .GroupBy(i => i.CargoId)
  .ToDictionary(
  g => Cargos.FirstOrDefault(c => c.Id == g.Key)?.NomeCargo ?? "Desconhecido",
  g => g.Count()
  ) : new Dictionary<string, int>();

  public string[] DonutLabels => InscricoesPorCargo.Keys.ToArray();
  public int[] DonutSeries => InscricoesPorCargo.Values.ToArray();

  public string[] PieLabels => InscricoesPorCargo.Keys.ToArray();
  public int[] PieSeries => InscricoesPorCargo.Values.ToArray();

  private Random random = new Random();

  protected override async Task OnInitializedAsync()
  {
    Cargos = await CargoService.GetCargos();
    Candidatos = await CandidatoService.GetCandidatos();
    Inscricoes = await InscricaoService.GetInscricoes();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await JSRuntime.InvokeVoidAsync("initDataCharts",
    Candidatos.Count,
    Cargos.Count,
    Inscricoes.Count,
    Cargos.Select(c => c.NomeCargo).ToArray(),
    InscricoesPorCargo.Values.ToArray(),
    DonutLabels,
    DonutSeries,
    PieLabels,
    PieSeries
    );
  }

  private async Task GerarCargosAleatorios()
  {
    try
    {
      int quantidadeCargos = random.Next(3, 8);
      string[] nomesCargos = { "Desenvolvedor", "Analista", "Gerente", "Coordenador", "Diretor", "Técnico", "Engenheiro",
"Administrador", "Contador", "Advogado" };
      string[] editais = { "001/2023", "002/2023", "003/2023", "004/2023", "005/2023", "006/2023", "007/2023" };

      for (int i = 0; i < quantidadeCargos; i++)
      {
        var cargo = new Cargo
        {
          NomeCargo = $"{nomesCargos[random.Next(nomesCargos.Length)]} {random.Next(1, 5)}",
          Edital = editais[random.Next(editais.Length)],
          SalarioBase = Math.Round(random.Next(1500, 10000) + random.NextDouble(), 2)
        };

        await CargoService.CreateCargo(cargo);
      }

      Cargos = await CargoService.GetCargos();
      ToastService.ShowSuccess($"{quantidadeCargos} cargos aleatórios criados com sucesso!");

      await JSRuntime.InvokeVoidAsync("initDataCharts",
      Candidatos.Count,
      Cargos.Count,
      Inscricoes.Count,
      Cargos.Select(c => c.NomeCargo).ToArray(),
      InscricoesPorCargo.Values.ToArray(),
      DonutLabels,
      DonutSeries,
      PieLabels,
      PieSeries
      );

      StateHasChanged();
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao gerar cargos aleatórios: {ex.Message}");
    }
  }

  private async Task GerarCandidatosAleatorios()
  {
    try
    {
      int quantidadeCandidatos = random.Next(5, 15);
      string[] nomes = { "João", "Maria", "Pedro", "Ana", "Carlos", "Juliana", "Fernando", "Mariana", "Ricardo", "Camila",
"Lucas", "Larissa", "Gabriel", "Bianca", "Rafael" };
      string[] sobrenomes = { "Silva", "Santos", "Oliveira", "Souza", "Pereira", "Lima", "Costa", "Rodrigues", "Ferreira",
"Almeida", "Carvalho", "Gomes", "Martins", "Araújo", "Melo" };

      for (int i = 0; i < quantidadeCandidatos; i++)
      {
        string nome = $"{nomes[random.Next(nomes.Length)]} {sobrenomes[random.Next(sobrenomes.Length)]}";

        StringBuilder cpf = new StringBuilder();
        for (int j = 0; j < 11; j++)
        {
          cpf.Append(random.Next(0, 10));
        }

        DateTime dataNascimento = DateTime.Now.AddYears(-random.Next(18, 60)).AddDays(-random.Next(1, 365));

        var candidato = new Candidato
        {
          Nome = nome,
          Cpf = cpf.ToString(),
          DataNascimento = dataNascimento
        };

        await CandidatoService.CreateCandidato(candidato);
      }

      Candidatos = await CandidatoService.GetCandidatos();
      ToastService.ShowSuccess($"{quantidadeCandidatos} candidatos aleatórios criados com sucesso!");

      StateHasChanged();
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao gerar candidatos aleatórios: {ex.Message}");
    }
  }

  private async Task GerarInscricoesAleatorias()
  {
    try
    {
      if (Cargos.Count == 0 || Candidatos.Count == 0)
      {
        ToastService.ShowError("É necessário ter cargos e candidatos cadastrados para gerar inscrições!");
        return;
      }

      int quantidadeInscricoes = Math.Min(Candidatos.Count * 2, 20);

      for (int i = 0; i < quantidadeInscricoes; i++)
      {
        int candidatoId = Candidatos[random.Next(Candidatos.Count)].Id ?? 0;
        int cargoId = Cargos[random.Next(Cargos.Count)].Id;

        bool inscricaoExistente = Inscricoes.Any(insc => insc.CandidatoId == candidatoId && insc.CargoId == cargoId);

        if (!inscricaoExistente)
        {
          double notaGerais = Math.Round(random.NextDouble() * 10, 2);
          double notaEspecificos = Math.Round(random.NextDouble() * 10, 2);

          var inscricao = new Inscricao
          {
            CandidatoId = candidatoId,
            CargoId = cargoId,
            DataInscricao = DateTime.Now.AddDays(-random.Next(1, 30)),
            NotaConhGerais = notaGerais,
            NotaConhEspecificos = notaEspecificos,
            NumeroInsc = $"INSC{DateTime.Now.Ticks.ToString().Substring(10)}"
          };

          await InscricaoService.CreateInscricao(inscricao);
        }
      }

      Inscricoes = await InscricaoService.GetInscricoes();
      ToastService.ShowSuccess("Inscrições aleatórias criadas com sucesso!");

      await JSRuntime.InvokeVoidAsync("initDataCharts",
      Candidatos.Count,
      Cargos.Count,
      Inscricoes.Count,
      Cargos.Select(c => c.NomeCargo).ToArray(),
      InscricoesPorCargo.Values.ToArray(),
      DonutLabels,
      DonutSeries,
      PieLabels,
      PieSeries
      );

      StateHasChanged();
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao gerar inscrições aleatórias: {ex.Message}");
    }
  }
}
