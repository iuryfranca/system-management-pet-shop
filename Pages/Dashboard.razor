@page "/"
@using Microsoft.JSInterop
@using SystemManagementPetshop.Models
@using SystemManagementPetshop.Services
@using System.Text
@inherits FlowbitePage
@inject AnimalService AnimalService
@inject FuncionarioService FuncionarioService
@inject ProdutoService ProdutoService
@inject ServicoService ServicoService
@inject ToastService ToastService

<PageTitle>Dashboard</PageTitle>

<div class="flex flex-col gap-4">
  <Header Title="Dashboard"
    Description="Visualize dados do sistema Pet Shop de forma fácil e rápida através de gráficos interativos. Analise informações sobre animais, produtos, funcionários e serviços." />

  <div class="flex flex-wrap gap-4 mb-4">
    <button @onclick="GerarAnimaisAleatorios"
      class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
      Gerar Animais Aleatórios
    </button>
    <button @onclick="GerarFuncionariosAleatorios"
      class="text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
      Gerar Funcionários Aleatórios
    </button>
    <button @onclick="GerarProdutosAleatorios"
      class="text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:outline-none focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800">
      Gerar Produtos Aleatórios
    </button>
    <button @onclick="GerarServicosAleatorios"
      class="text-white bg-orange-700 hover:bg-orange-800 focus:ring-4 focus:outline-none focus:ring-orange-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-orange-600 dark:hover:bg-orange-700 dark:focus:ring-orange-800">
      Gerar Serviços Aleatórios
    </button>
  </div>

  <div class="flex flex-col flex-wrap lg:flex-row gap-4">
    <div
      class="bg-white rounded-lg w-[600px] shadow-sm dark:bg-gray-800 p-4 md:p-6 border-2 border-gray-200 dark:border-gray-700">
      <h5 class="text-xl mb-4 font-bold leading-none text-gray-900 dark:text-white pe-1">
        Sistema Pet Shop
      </h5>
      <div class="grid grid-cols-2 gap-4">
        <dl class="flex items-center">
          <dt class="text-gray-500 dark:text-gray-400 text-sm font-normal me-1">Animais:</dt>
          <dd class="text-gray-900 text-sm dark:text-white font-semibold">@Animais.Count</dd>
        </dl>
        <dl class="flex items-center">
          <dt class="text-gray-500 dark:text-gray-400 text-sm font-normal me-1">Funcionários:</dt>
          <dd class="text-gray-900 text-sm dark:text-white font-semibold">@Funcionarios.Count</dd>
        </dl>
        <dl class="flex items-center">
          <dt class="text-gray-500 dark:text-gray-400 text-sm font-normal me-1">Produtos:</dt>
          <dd class="text-gray-900 text-sm dark:text-white font-semibold">@Produtos.Count</dd>
        </dl>
        <dl class="flex items-center">
          <dt class="text-gray-500 dark:text-gray-400 text-sm font-normal me-1">Serviços:</dt>
          <dd class="text-gray-900 text-sm dark:text-white font-semibold">@Servicos.Count</dd>
        </dl>
      </div>
      @if (Produtos.Count > 0)
      {
        <div class="mb-4 mt-2">
          <label for="selectCategoriaChart" class="block mb-1 text-sm font-medium text-gray-900 dark:text-white">Filtrar por Categoria:</label>
          <select id="selectCategoriaChart"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
            <option value="">Todas as categorias</option>
            @foreach (var categoria in Enum.GetValues<CategoriaProduto>())
            {
              <option value="@categoria">@categoria</option>
            }
          </select>
        </div>
        <div id="column-chart"></div>
      }
      else
      {
        <div class="py-6 text-center text-gray-500 dark:text-gray-400">
          Ainda não existem dados cadastrados. Gere alguns registros para visualizar o gráfico.
        </div>
      }
    </div>

    <div
      class="bg-white rounded-lg w-[400px] flex flex-col justify-between shadow-sm dark:bg-gray-800 p-4 md:p-6 border-2 border-gray-200 dark:border-gray-700">
      <div class="flex justify-between mb-3">
        <div class="flex justify-center items-center">
          <h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white pe-1">
            Animais por Tipo
          </h5>
        </div>
      </div>
      @if (Animais.Count > 0)
      {
        <!-- Donut Chart -->
        <div class="py-6" id="donut-chart"></div>
      }
      else
      {
        <div class="py-6 text-center text-gray-500 dark:text-gray-400">
          Ainda não existem dados cadastrados. Gere alguns registros para visualizar o gráfico.
        </div>
      }
    </div>

    <div
      class="bg-white w-[400px] rounded-lg shadow-sm dark:bg-gray-800 p-4 md:p-6 border-2 border-gray-200 dark:border-gray-700 flex flex-col justify-between gap-4">
      <div class="flex justify-between items-start w-full">
        <div class="flex-col items-center">
          <div class="flex items-center mb-1">
            <h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white me-1">
              Serviços por Status
            </h5>
          </div>
        </div>
      </div>
      @if (Servicos.Count > 0)
      {
        <!-- Pie Chart -->
        <div class="py-6" id="pie-chart"></div>
      }
      else
      {
        <div class="py-6 text-center text-gray-500 dark:text-gray-400">
          Ainda não existem dados cadastrados. Gere alguns registros para visualizar o gráfico.
        </div>
      }
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    window.chartColumn = window.chartColumn || null;
    window.chartDonut = window.chartDonut || null;
    window.chartPie = window.chartPie || null;
    window.allCargos = window.allCargos || [];
    window.allInscricoesPorCargo = window.allInscricoesPorCargo || [];
    window.donutLabels = window.donutLabels || [];
    window.donutSeries = window.donutSeries || [];
    window.pieLabels = window.pieLabels || [];
    window.pieSeries = window.pieSeries || [];

    window.initDataCharts = function (totalCandidatos, totalCargos, totalInscricoes, cargos, inscricoesPorCargo, donutLabelsParam, donutSeriesParam, pieLabelsParam, pieSeriesParam) {
      console.log('initDataCharts chamado', { totalCandidatos, totalCargos, totalInscricoes, cargos, inscricoesPorCargo });

      window.allCargos = cargos;
      window.allInscricoesPorCargo = inscricoesPorCargo;
      window.donutLabels = donutLabelsParam;
      window.donutSeries = donutSeriesParam;
      window.pieLabels = pieLabelsParam;
      window.pieSeries = pieSeriesParam;

      if (window.chartColumn) { window.chartColumn.destroy(); window.chartColumn = null; }
      if (window.chartDonut) { window.chartDonut.destroy(); window.chartDonut = null; }
      if (window.chartPie) { window.chartPie.destroy(); window.chartPie = null; }

      if (cargos.length === 0 || inscricoesPorCargo.length === 0) {
        return;
      }

      if (typeof ApexCharts !== "undefined" && document.getElementById("column-chart")) {
        const optionsColumnChart = {
          colors: ["#1A56DB"],
          series: [
            {
              name: "Inscrições",
              color: "#1A56DB",
              data: cargos.map((cargo, idx) => ({ x: cargo, y: inscricoesPorCargo[idx] || 0 }))
            }
          ],
          chart: {
            type: "bar",
            height: "320px",
            fontFamily: "Inter, sans-serif",
            toolbar: {
              show: false,
            },
          },
          plotOptions: {
            bar: {
              horizontal: false,
              columnWidth: "70%",
              borderRadiusApplication: "end",
              borderRadius: 8,
            },
          },
          tooltip: {
            shared: true,
            intersect: false,
            style: {
              fontFamily: "Inter, sans-serif",
            },
          },
          states: {
            hover: {
              filter: {
                type: "darken",
                value: 1,
              },
            },
          },
          stroke: {
            show: true,
            width: 0,
            colors: ["transparent"],
          },
          grid: {
            show: false,
            strokeDashArray: 4,
            padding: {
              left: 2,
              right: 2,
              top: -14,
            },
          },
          dataLabels: {
            enabled: false,
          },
          legend: {
            show: false,
          },
          xaxis: {
            floating: false,
            labels: {
              show: true,
              style: {
                fontFamily: "Inter, sans-serif",
                cssClass: "text-xs font-normal fill-gray-500 dark:fill-gray-400",
              },
            },
            axisBorder: {
              show: false,
            },
            axisTicks: {
              show: false,
            },
          },
          yaxis: {
            show: false,
          },
          fill: {
            opacity: 1,
          },
        }
        window.chartColumn = new ApexCharts(document.getElementById("column-chart"), optionsColumnChart);
        window.chartColumn.render();
      }

      if (typeof ApexCharts !== "undefined" && document.getElementById("donut-chart")) {
        const optionsDonut = {
          series: window.donutSeries,
          labels: window.donutLabels,
          colors: ["#1C64F2", "#16BDCA", "#FDBA8C", "#E74694", "#9061F9", "#F59E42", "#F43F5E"],
          chart: {
            height: 320,
            width: "100%",
            type: "donut",
          },
          stroke: {
            colors: ["transparent"],
            lineCap: "",
          },
          plotOptions: {
            pie: {
              donut: {
                labels: {
                  show: true,
                  name: {
                    show: true,
                    fontFamily: "Inter, sans-serif",
                    offsetY: 20,
                  },
                  total: {
                    showAlways: true,
                    show: true,
                    label: "Total",
                    fontFamily: "Inter, sans-serif",
                    formatter: function (w) {
                      const sum = w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                      return sum;
                    },
                  },
                  value: {
                    show: true,
                    fontFamily: "Inter, sans-serif",
                    offsetY: -20,
                    formatter: function (value) {
                      return value;
                    },
                  },
                },
                size: "80%",
              },
            },
          },
          grid: {
            padding: {
              top: -2,
            },
          },
          dataLabels: {
            enabled: false,
          },
          legend: {
            position: "bottom",
            fontFamily: "Inter, sans-serif",
          },
        };
        window.chartDonut = new ApexCharts(document.getElementById("donut-chart"), optionsDonut);
        window.chartDonut.render();
      }

      if (typeof ApexCharts !== "undefined" && document.getElementById("pie-chart")) {
        const optionsPie = {
          series: window.pieSeries,
          labels: window.pieLabels,
          colors: ["#1C64F2", "#16BDCA", "#9061F9", "#F59E42", "#F43F5E", "#FDBA8C", "#E74694"],
          chart: {
            height: 420,
            width: "100%",
            type: "pie",
          },
          stroke: {
            colors: ["white"],
            lineCap: "",
          },
          plotOptions: {
            pie: {
              labels: {
                show: true,
              },
              size: "100%",
              dataLabels: {
                offset: -25
              }
            },
          },
          dataLabels: {
            enabled: true,
            style: {
              fontFamily: "Inter, sans-serif",
            },
          },
          legend: {
            position: "bottom",
            fontFamily: "Inter, sans-serif",
          },
        };
        window.chartPie = new ApexCharts(document.getElementById("pie-chart"), optionsPie);
        window.chartPie.render();
      }

      const selectCargo = document.getElementById("selectCargoChart");
      if (selectCargo) {
        selectCargo.onchange = function () {
          const idx = selectCargo.value;
          let data;
          if (idx === "") {
            data = window.allCargos.map((cargo, i) => ({ x: cargo, y: window.allInscricoesPorCargo[i] || 0 }));
          } else {
            data = [{ x: window.allCargos[idx], y: window.allInscricoesPorCargo[idx] || 0 }];
          }
          if (window.chartColumn) {
            window.chartColumn.updateSeries([
              {
                name: "Inscrições",
                color: "#1A56DB",
                data: data
              }
            ]);
          }
        }
      }
    }
  });
</script>

@code {
  [Inject]
  public IJSRuntime JSRuntime { get; set; }

  public List<Animal> Animais { get; set; } = new();
  public List<Funcionario> Funcionarios { get; set; } = new();
  public List<Produto> Produtos { get; set; } = new();
  public List<Servico> Servicos { get; set; } = new();

  public Dictionary<string, int> ProdutosPorCategoria =>
  Produtos.Count > 0 ?
  Produtos
  .GroupBy(p => p.Categoria)
  .ToDictionary(
  g => g.Key.ToString(),
  g => g.Count()
  ) : new Dictionary<string, int>();

  public Dictionary<string, int> AnimaisPorTipo =>
  Animais.Count > 0 ?
  Animais
  .GroupBy(a => a.TipoAni)
  .ToDictionary(
  g => g.Key.ToString(),
  g => g.Count()
  ) : new Dictionary<string, int>();

  public Dictionary<string, int> ServicosPorStatus =>
  Servicos.Count > 0 ?
  Servicos
  .GroupBy(s => s.Status)
  .ToDictionary(
  g => g.Key.ToString(),
  g => g.Count()
  ) : new Dictionary<string, int>();

  public string[] DonutLabels => AnimaisPorTipo.Keys.ToArray();
  public int[] DonutSeries => AnimaisPorTipo.Values.ToArray();

  public string[] PieLabels => ServicosPorStatus.Keys.ToArray();
  public int[] PieSeries => ServicosPorStatus.Values.ToArray();

  private Random random = new Random();

  protected override async Task OnInitializedAsync()
  {
    Animais = await AnimalService.GetAnimais();
    Funcionarios = await FuncionarioService.GetFuncionarios();
    Produtos = await ProdutoService.GetProdutos();
    Servicos = await ServicoService.GetServicos();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await JSRuntime.InvokeVoidAsync("initDataCharts",
    Animais.Count,
    Funcionarios.Count,
    Produtos.Count,
    ProdutosPorCategoria.Keys.ToArray(),
    ProdutosPorCategoria.Values.ToArray(),
    DonutLabels,
    DonutSeries,
    PieLabels,
    PieSeries
    );
  }

  private async Task GerarAnimaisAleatorios()
  {
    try
    {
      int quantidadeAnimais = random.Next(5, 12);
      string[] nomesAnimais = { "Rex", "Bella", "Max", "Luna", "Charlie", "Lucy", "Rocky", "Molly", "Buddy", "Daisy",
"Zeus", "Lola", "Duke", "Mia", "Bear", "Sophie", "Tucker", "Chloe", "Oliver" };
      string[] nomesDonosAnimais = { "João Silva", "Maria Santos", "Pedro Oliveira", "Ana Costa", "Carlos Pereira", 
"Juliana Lima", "Fernando Souza", "Mariana Almeida", "Ricardo Gomes", "Camila Ferreira" };
      string[] racas = { "Labrador", "Golden Retriever", "Bulldog", "Poodle", "Pastor Alemão", "Beagle", "Rottweiler", 
"Yorkshire", "Shih Tzu", "Maltês", "Siamês", "Ragdoll", "Maine Coon", "Canário", "Periquito" };

      var tiposAnimais = Enum.GetValues<TipoAnimal>();

      for (int i = 0; i < quantidadeAnimais; i++)
      {
        var animal = new Animal
        {
          NomeAni = nomesAnimais[random.Next(nomesAnimais.Length)],
          TipoAni = tiposAnimais[random.Next(tiposAnimais.Length)],
          RacaAni = racas[random.Next(racas.Length)],
          IdadeAni = random.Next(1, 15),
          PesoAni = Math.Round(random.NextDouble() * 30 + 1, 2),
          DonoNome = nomesDonosAnimais[random.Next(nomesDonosAnimais.Length)],
          DonoTelefone = $"11{random.Next(100000000, 999999999)}"
        };

        await AnimalService.CreateAnimal(animal);
      }

      Animais = await AnimalService.GetAnimais();
      ToastService.ShowSuccess($"{quantidadeAnimais} animais aleatórios criados com sucesso!");

      await AtualizarGraficos();
      StateHasChanged();
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao gerar animais aleatórios: {ex.Message}");
    }
  }

  private async Task GerarFuncionariosAleatorios()
  {
    try
    {
      int quantidadeFuncionarios = random.Next(3, 8);
      string[] nomes = { "João", "Maria", "Pedro", "Ana", "Carlos", "Juliana", "Fernando", "Mariana", "Ricardo", "Camila",
"Lucas", "Larissa", "Gabriel", "Bianca", "Rafael" };
      string[] sobrenomes = { "Silva", "Santos", "Oliveira", "Souza", "Pereira", "Lima", "Costa", "Rodrigues", "Ferreira",
"Almeida", "Carvalho", "Gomes", "Martins", "Araújo", "Melo" };
      string[] cargos = { "Veterinário", "Atendente", "Groomer", "Auxiliar Veterinário", "Gerente", "Recepcionista", 
"Técnico em Veterinária", "Cuidador de Animais" };

      for (int i = 0; i < quantidadeFuncionarios; i++)
      {
        string nome = $"{nomes[random.Next(nomes.Length)]} {sobrenomes[random.Next(sobrenomes.Length)]}";
        string cargo = cargos[random.Next(cargos.Length)];

        var funcionario = new Funcionario
        {
          NomeFunc = nome,
          CargoFunc = cargo,
          EmailFunc = $"{nome.Replace(" ", ".").ToLower()}@petshop.com",
          TelefoneFunc = $"11{random.Next(100000000, 999999999)}",
          SenhaFunc = "123456" // Senha padrão para funcionários demo
        };

        await FuncionarioService.CreateFuncionario(funcionario);
      }

      Funcionarios = await FuncionarioService.GetFuncionarios();
      ToastService.ShowSuccess($"{quantidadeFuncionarios} funcionários aleatórios criados com sucesso!");

      await AtualizarGraficos();
      StateHasChanged();
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao gerar funcionários aleatórios: {ex.Message}");
    }
  }

  private async Task GerarProdutosAleatorios()
  {
    try
    {
      int quantidadeProdutos = random.Next(8, 20);
      string[] nomesProdutos = { "Ração Premium", "Shampoo Canino", "Brinquedo Mordedor", "Coleira Ajustável", 
"Petisco Natural", "Areia Sanitária", "Cama Pet", "Comedouro Automático", "Escova de Pelo", "Medicamento Antiparasitário",
"Biscoito para Cães", "Arranhador para Gatos", "Guia Retrátil", "Vitamina Pet", "Bolinha de Tênis" };
      string[] marcasProdutos = { "PetLove", "Royal Canin", "Pedigree", "Whiskas", "Hill's", "Premier Pet", "Golden", 
"Biofresh", "Mundo Animal", "Ferplast" };

      var categorias = Enum.GetValues<CategoriaProduto>();

      for (int i = 0; i < quantidadeProdutos; i++)
      {
        var produto = new Produto
        {
          NomeProd = nomesProdutos[random.Next(nomesProdutos.Length)],
          MarcaProd = marcasProdutos[random.Next(marcasProdutos.Length)],
          ValorProd = (decimal)Math.Round(random.NextDouble() * 200 + 10, 2),
          Estoque = random.Next(0, 100),
          Categoria = categorias[random.Next(categorias.Length)]
        };

        await ProdutoService.CreateProduto(produto);
      }

      Produtos = await ProdutoService.GetProdutos();
      ToastService.ShowSuccess($"{quantidadeProdutos} produtos aleatórios criados com sucesso!");

      await AtualizarGraficos();
      StateHasChanged();
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao gerar produtos aleatórios: {ex.Message}");
    }
  }

  private async Task GerarServicosAleatorios()
  {
    try
    {
      if (Funcionarios.Count == 0 || Animais.Count == 0)
      {
        ToastService.ShowError("É necessário ter funcionários e animais cadastrados para gerar serviços!");
        return;
      }

      int quantidadeServicos = random.Next(5, 15);
      string[] nomesServicos = { "Consulta Veterinária", "Vacinação", "Banho e Tosa", "Cirurgia", "Exame de Sangue", 
"Castração", "Limpeza Dental", "Tratamento Dermatológico", "Medicação", "Check-up Geral" };

      var statusServicos = Enum.GetValues<StatusServico>();

      for (int i = 0; i < quantidadeServicos; i++)
      {
        var servico = new Servico
        {
          NomeServ = nomesServicos[random.Next(nomesServicos.Length)],
          DescricaoServ = "Serviço gerado automaticamente para demonstração",
          DuracaoServ = TimeSpan.FromMinutes(random.Next(30, 180)),
          ValorServ = (decimal)Math.Round(random.NextDouble() * 300 + 50, 2),
          FuncionarioId = Funcionarios[random.Next(Funcionarios.Count)].Id,
          AnimalId = Animais[random.Next(Animais.Count)].Id,
          DataServico = DateTime.Now.AddDays(-random.Next(0, 30)).AddHours(random.Next(8, 18)),
          Status = statusServicos[random.Next(statusServicos.Length)]
        };

        await ServicoService.CreateServico(servico);
      }

      Servicos = await ServicoService.GetServicos();
      ToastService.ShowSuccess($"{quantidadeServicos} serviços aleatórios criados com sucesso!");

      await AtualizarGraficos();
      StateHasChanged();
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao gerar serviços aleatórios: {ex.Message}");
    }
  }

  private async Task AtualizarGraficos()
  {
    await JSRuntime.InvokeVoidAsync("initDataCharts",
    Animais.Count,
    Funcionarios.Count,
    Produtos.Count,
    ProdutosPorCategoria.Keys.ToArray(),
    ProdutosPorCategoria.Values.ToArray(),
    DonutLabels,
    DonutSeries,
    PieLabels,
    PieSeries
    );
  }
}
