@page "/registro-inscricao"
@using AppConcurso.Models
@using AppConcurso.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject InscricaoService InscricaoService
@inject CandidatoService CandidatoService
@inject CargoService CargoService
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject IJSRuntime JS
@inherits FlowbitePage

<PageTitle>Gerenciamento de Inscrições</PageTitle>

<div class="flex flex-col gap-4">
  <Header Title="Gerenciamento de Inscrições"
    Description="Cadastre e gerencie inscrições de candidatos, incluindo notas e dados pessoais." />

  <div class="flex flex-row gap-8 w-full">
    <div class="bg-gray-50 dark:bg-gray-800 rounded-lg w-full shadow-sm border-2 border-gray-200 dark:border-gray-700">
      <div class="px-4 py-3 flex flex-row gap-6 text-gray-700 dark:text-gray-300">
        <div class="flex flex-col gap-2 w-full">
          <div class="font-bold">Pesquisa de texto</div>
          <div class="relative z-0 w-full group">
            <input @bind="filtroTexto" @bind:event="oninput" @onkeyup="AplicarFiltro"
              class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
              placeholder="Buscar por nome, CPF ou número de inscrição" />
          </div>
        </div>
        <div class="flex flex-col gap-2 min-w-56">
          <label for="ordenacao" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Ordenação</label>
          <select id="ordenacao" @bind="tipoOrdenacao" @bind:after="AplicarFiltro"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
            <option selected value="nome_asc">Nome (A-Z)</option>
            <option value="nome_desc">Nome (Z-A)</option>
            <option value="data_insc_asc">Data de Inscrição (Mais antiga)</option>
            <option value="data_insc_desc">Data de Inscrição (Mais recente)</option>
            <option value="media_asc">Média (Menor-Maior)</option>
            <option value="media_desc">Média (Maior-Menor)</option>
          </select>
        </div>
        <div class="flex items-end w-44">
          <button @onclick="LimparFiltros"
            class="px-4 py-2 text-sm h-12 font-medium text-white bg-gray-600 rounded-lg hover:bg-gray-700 focus:ring-4 focus:outline-none focus:ring-gray-300">
            Limpar Filtros
          </button>
        </div>
      </div>
    </div>
    <button type="button" @onclick="ShowModal"
      class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-48 px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Cadastrar
      Inscrição</button>
  </div>

  <h2 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Inscrições Cadastradas</h2>

  <div class="flex flex-col gap-6">
    @if (inscricoesFiltradas != null && inscricoesFiltradas.Any())
    {
      @foreach (var inscrito in inscricoesFiltradas)
      {
        <div
          class="bg-gray-50 dark:bg-gray-800 rounded-lg shadow-sm border-2 border-gray-200 dark:border-gray-700 flex flex-col justify-between">
          <div class="px-4 py-3 grid grid-cols-4 gap-4 text-gray-700 dark:text-gray-300">
            <div>
              <div class="font-bold">Nome</div>
              <div>@inscrito.Nome</div>
            </div>
            <div>
              <div class="font-bold">CPF</div>
              <div>@inscrito.Cpf</div>
            </div>
            <div>
              <div class="font-bold">Data de Nascimento</div>
              <div>@inscrito.DataNascimento.ToString("dd/MM/yyyy")</div>
            </div>
            <div>
              <div class="font-bold">Nº Inscrição</div>
              <div>@inscrito.NumeroInsc</div>
            </div>
            <div>
              <div class="font-bold">Data de Inscrição</div>
              <div>@inscrito.DataInscricao.ToString("dd/MM/yyyy")</div>
            </div>
            <div>
              <div class="font-bold">Nota Gerais</div>
              <div>@inscrito.NotaConhGerais</div>
            </div>
            <div>
              <div class="font-bold">Nota Específicos</div>
              <div>@inscrito.NotaConhEspecificos</div>
            </div>
            <div>
              <div class="font-bold">Média</div>
              <div>@inscrito.MediaDeNotas</div>
            </div>
          </div>

          <div class="flex justify-center gap-6 py-3 px-4 bg-gray-200 dark:bg-gray-700 rounded-b-lg">
            <button @onclick="() => ExcluirInscricao(inscrito.NumeroInsc)"
              class="inline-flex cursor-pointer items-center px-3 py-2 text-sm font-medium text-center text-white bg-red-700 rounded-lg hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16">
                </path>
              </svg>
              Excluir
            </button>
          </div>
        </div>
      }
    }
    else
    {
      <div
        class="bg-white dark:bg-gray-800 p-4 rounded-lg text-center text-gray-500 dark:text-gray-400 border-2 border-gray-200 dark:border-gray-700">
        Nenhuma inscrição cadastrada
      </div>
    }
  </div>

  <!-- Main modal -->
  <div id="default-modal" tabindex="-1" aria-hidden="true" data-modal-backdrop="static"
    class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
    <div class="relative p-4 w-full max-w-2xl max-h-full">
      <!-- Modal content -->
      <div class="relative bg-white rounded-lg shadow-sm dark:bg-gray-700">
        <!-- Modal header -->
        <div
          class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600 border-gray-200">
          <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
            Nova Inscrição
          </h3>
          <button type="button" @onclick="CloseModal"
            class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
            data-modal-hide="default-modal">
            <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
            </svg>
            <span class="sr-only">Fechar modal</span>
          </button>
        </div>
        <!-- Modal body -->
        <EditForm Model="@novaInscricao" OnValidSubmit="HandleValidSubmit" class="p-4">
          <DataAnnotationsValidator />

          <div class="relative z-0 w-full mb-5 group">
            <label for="select_candidato"
              class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Candidato</label>
            <select id="select_candidato" @bind="novaInscricaoCandidatoId"
              class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              required>
              <option value="">Selecione um candidato</option>
              @foreach (var candidato in candidatos)
              {
                <option value="@candidato.Id">@candidato.Nome (@candidato.Cpf)</option>
              }
            </select>
          </div>

          <div class="relative z-0 w-full mb-5 group">
            <label for="select_cargo" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Cargo</label>
            <select id="select_cargo" @bind="novaInscricaoCargoId"
              class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              required>
              <option value="">Selecione um cargo</option>
              @foreach (var cargo in cargos)
              {
                <option value="@cargo.Id">@cargo.NomeCargo</option>
              }
            </select>
          </div>

          <div class="relative z-0 w-full mb-5 group">
            <input @bind="novaInscricao.NotaConhGerais" type="number" step="0.01" id="floating_nota_gerais"
              class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
              placeholder=" " required />
            <label for="floating_nota_gerais"
              class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">
              Nota Conhecimentos Gerais</label>
          </div>

          <div class="relative z-0 w-full mb-5 group">
            <input @bind="novaInscricao.NotaConhEspecificos" type="number" step="0.01" id="floating_nota_especificos"
              class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
              placeholder=" " required />
            <label for="floating_nota_especificos"
              class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">
              Nota Conhecimentos Específicos</label>
          </div>

          <!-- Modal footer -->
          <div class="flex items-center rounded-b dark:border-gray-600">
            <button data-modal-hide="default-modal" type="submit"
              class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
              Cadastrar</button>

            <button data-modal-hide="default-modal" type="button" @onclick="CloseModal"
              class="py-2.5 px-5 ms-3 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">Cancelar</button>
          </div>
        </EditForm>
      </div>
    </div>
  </div>
</div>

@code {
  private List<CandidatoInscrito> inscricoes = new();
  private List<CandidatoInscrito> inscricoesFiltradas = new();
  private CandidatoInscrito novaInscricao = new();
  private int? novaInscricaoCandidatoId;
  private int? novaInscricaoCargoId;
  private List<Candidato> candidatos = new List<Candidato>();
  private List<Cargo> cargos = new List<Cargo>();
  private string filtroTexto = "";
  private string tipoOrdenacao = "nome_asc";

  protected override async Task OnInitializedAsync()
  {
    await CarregarCandidatosECargos();
    await CarregarInscricoes();
  }

  private async Task CarregarCandidatosECargos()
  {
    candidatos = await CandidatoService.GetCandidatos();
    cargos = await CargoService.GetCargos();
  }

  private async Task CarregarInscricoes()
  {
    try
    {
      // Aqui você precisará buscar as inscrições e os dados dos candidatos relacionados
      var inscricoesDb = await InscricaoService.GetInscricoes();
      var candidatosDb = await CandidatoService.GetCandidatos();
      inscricoes = inscricoesDb.Join(
      candidatosDb,
      insc => insc.CandidatoId,
      cand => cand.Id,
      (insc, cand) => new CandidatoInscrito
      {
        Nome = cand.Nome ?? "",
        Cpf = cand.Cpf ?? "",
        DataNascimento = cand.DataNascimento,
        NumeroInsc = insc.NumeroInsc,
        DataInscricao = insc.DataInscricao,
        NotaConhGerais = insc.NotaConhGerais,
        NotaConhEspecificos = insc.NotaConhEspecificos,
        MediaDeNotas = (insc.NotaConhGerais + insc.NotaConhEspecificos) / 2.0
      }
      ).ToList();
      AplicarFiltro();
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao carregar inscrições: {ex.Message}");
    }
  }

  private void AplicarFiltro()
  {
    var resultados = string.IsNullOrWhiteSpace(filtroTexto)
    ? inscricoes
    : inscricoes.Where(i =>
    (i.Nome != null && i.Nome.Contains(filtroTexto, StringComparison.OrdinalIgnoreCase)) ||
    (i.Cpf != null && i.Cpf.Contains(filtroTexto, StringComparison.OrdinalIgnoreCase)) ||
    (i.NumeroInsc != null && i.NumeroInsc.Contains(filtroTexto, StringComparison.OrdinalIgnoreCase))
    ).ToList();

    switch (tipoOrdenacao)
    {
      case "nome_asc":
        resultados = resultados.OrderBy(i => i.Nome).ToList();
        break;
      case "nome_desc":
        resultados = resultados.OrderByDescending(i => i.Nome).ToList();
        break;
      case "data_insc_asc":
        resultados = resultados.OrderBy(i => i.DataInscricao).ToList();
        break;
      case "data_insc_desc":
        resultados = resultados.OrderByDescending(i => i.DataInscricao).ToList();
        break;
      case "media_asc":
        resultados = resultados.OrderBy(i => i.MediaDeNotas).ToList();
        break;
      case "media_desc":
        resultados = resultados.OrderByDescending(i => i.MediaDeNotas).ToList();
        break;
    }
    inscricoesFiltradas = resultados;
  }

  private void LimparFiltros()
  {
    filtroTexto = "";
    tipoOrdenacao = "nome_asc";
    AplicarFiltro();
  }

  private async Task CloseModal()
  {
    LimparCampos();
    await JS.InvokeVoidAsync("flowbiteInterop.closeModal", "default-modal");
  }

  private async Task ShowModal()
  {
    LimparCampos();
    await JS.InvokeVoidAsync("flowbiteInterop.showModal", "default-modal");
  }

  private void LimparCampos()
  {
    novaInscricao = new CandidatoInscrito();
  }

  private async Task HandleValidSubmit()
  {
    try
    {
      if (novaInscricaoCandidatoId == null || novaInscricaoCargoId == null)
      {
        ToastService.ShowError("Selecione um candidato e um cargo.");
        return;
      }

      var novaInscricaoDb = new Inscricao
      {
        CargoId = novaInscricaoCargoId.Value,
        CandidatoId = novaInscricaoCandidatoId.Value,
        NotaConhGerais = novaInscricao.NotaConhGerais,
        NotaConhEspecificos = novaInscricao.NotaConhEspecificos,
        DataInscricao = DateTime.Now,
        NumeroInsc = (DateTime.Now.Ticks.ToString()) // Gera um número único simples
      };

      await InscricaoService.CreateInscricao(novaInscricaoDb);

      ToastService.ShowSuccess("Inscrição cadastrada com sucesso!");
      await CarregarInscricoes();
      await CloseModal();
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao cadastrar inscrição: {ex.Message}");
    }
  }

  private async Task ExcluirInscricao(string numeroInsc)
  {
    try
    {
      // Buscar a inscrição pelo número para obter o Id
      var inscricoesDb = await InscricaoService.GetInscricoes();
      var inscricao = inscricoesDb.FirstOrDefault(i => i.NumeroInsc == numeroInsc);
      if (inscricao == null)
      {
        ToastService.ShowError("Inscrição não encontrada.");
        return;
      }
      await InscricaoService.DeleteInscricao(inscricao.Id);
      ToastService.ShowSuccess("Inscrição excluída com sucesso!");
      await CarregarInscricoes();
    }
    catch (Exception ex)
    {
      ToastService.ShowError($"Erro ao excluir inscrição: {ex.Message}");
    }
  }
}
